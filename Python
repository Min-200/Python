Python使用过程中遇到的问题

１.继承父类时的属性问题
class A():
    def __init__(self):
        self.namea="aaa"

    def funca(self):
        print "function a : %s"%self.namea

class B(A):
    def __init__(self):
        self.nameb="bbb"
    def funcb(self):
        print "function b : %s"%self.nameb

b=B()
print b.namea

error:
  print b.namea
AttributeError: B instance has no attribute 'namea'

在继承父类后,如果重新构造,则会无法找到父类的属性
解决方法:

class A(object):                            ++++++++++
    def __init__(self):
        self.namea="aaa"

    def funca(self):
        print "function a : %s"%self.namea

class B(A):
    def __init__(self):
        super(B,self).__init__()             ++++++++
        self.nameb="bbb"

    def funcb(self):
        print "function b : %s"%self.nameb

在两处加号的地方修改　
super函数要求继承的类A继承自object类，这样才能使用super函数，因为这是python的“新式类”支持的特性。
当前的类和对象可以作为super函数的参数使用，调用函数返回的对象的任何方法都是调用超类的方法，而不是当前类的方法。

super函数会返回一个super对象，这个对象负责进行方法解析，解析过程其会自动查找所有的父类以及父类的父类。


还有一种方法:
  class B(A):
    def __init__(self):
        #这一行解决了问题
        A.__init__(self)           ++++++++++++
        self.nameb="bbb"
 







２.python 函数的参数
(1)F(arg1,arg2,...) 普通的方式
(2)F(arg1,arg2=value2,...)　　arg2给了默认值
(3)F(*arg1)  带一个*表示参数数量不固定,可以不给参数,也可以给多个
        >>> def a(*x):
        ...     if len(x)==0:
        ...             print 'None'
        ...     else:
        ...             print x
        ... 
        >>> a(1)
        (1,)
        >>> a(0)         是以元组表示的
        (0,)
        >>> a()
        None
        >>> a(1,2,3)
        (1, 2, 3)
(4)F(**arg1)形参名前加俩个*表示，参数在函数内部将被存放在以形式名为标识符的dictionary中，这时调用函数的方法则需要采用arg1=value1,arg2=value2这样的形式。
        >>> def b(**x):
        ...     if len(x)==0:
        ...             print "none"
        ...     else:
        ...             print x
        ... 
        >>> b()
        none
        >>> b(a=1)          列表形式
        {'a': 1}
        >>> b(a=1,c=2)
        {'a': 1, 'c': 2}
        >>> b(a=1,c=2,d=3)
        {'a': 1, 'c': 2, 'd': 3}


3.python print list 显示乱码
     print '\n'.join(table.row_values(19)) 即可


4.函数：startswith()

作用：判断字符串是否以指定字符或子字符串开头

语法：string.startswith(str, beg=0,end=len(string))
       或string[beg:end].startswith(str)
>>> s = 'hello good boy doiido'  
>>> print s.startswith('h')  
True  
>>> print s.startswith('hel')  
True  
>>> print s.startswith('h',4)  
False  
>>> print s.startswith('go',6,8)  
True  


